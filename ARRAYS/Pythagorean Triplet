Pythagorean Triplet 

Brute Force Method : TC will be O(n3)

#include <iostream>
using namespace std;

bool triplet(int arr[], int n ){
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            for(int k=j+1;k<n;k++){
                int x=arr[i]*arr[i];
				int y=arr[j]*arr[j];
				int z=arr[k]*arr[k];
                if(z==x+y || x==y+z || y==z+x){
                    cout<<"Yes"<<endl;
                    return true;
                }   
            }
        }
      }
      cout<<"No"<<endl;
                    return false;
    }


int main() {
    int t;
    cin>>t;
    while(t--){
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}
	triplet(arr,n);
    }
	return 0;
}

Efficient Method : O(n2)

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

bool triplet(int arr[], int n) 
{ 
    for (int i = 0; i < n; i++) 
        arr[i] = arr[i] * arr[i]; 

    sort(arr, arr + n); 
 
    for (int i = n - 1; i >= 2; i--) { 
        int l = 0; 
        int r = i - 1; 
        while (l < r) { 
            if (arr[l] + arr[r] == arr[i]) 
                return true; 
        if(arr[l] + arr[r] < arr[i])  
			l++;
		else
			r--; 
        } 
    } 
  
    return false; 
} 
  

int main(){
    int t;
    cin>>t;
    while(t--){
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}
	if(triplet(arr,n))
		cout<<"Yes"<<endl;
	else
		cout<<"No"<<endl;
    }
	return 0;
}





















